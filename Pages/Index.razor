@using TareaFinal_Jose.Modelos
@using System.IO

@page "/"

<h1>Generador de Caracteres Aleatorios</h1>
<div class="d-flex flex-row">
    <label class="p-1">Cantidad de Caracteres</label>
    <AppInputNumeric @bind-Value="numeroCaracteres" Placeholder="Cantidad de Caracteres" />
</div>
<div class="d-flex flex-row">
    <label class="p-1" typeof="Bold">Numeros</label>
    <CheckBox @bind-Checked="@chkNumeros" />
    <label class="p-1">Texto</label>
    <CheckBox @bind-Checked="@chkTexto" />
    <label class="p-1">Caracteres Especiales</label>
    <CheckBox @bind-Checked="@chkCaracteres" />
    <label class="p-2">Generar Archivo</label>
    <CheckBox @bind-Checked="@chkGenerarArchivo" />
</div>
<div class="d-flex align-items-stretch">
    @if (chkGenerarArchivo)
    {
        <AppInputText Placeholder="Ruta Archivo" @bind-Value="pathArchivo" />
    }
</div>
<div class="p-1">
    <Button Click="GenerarTexto" Color=Color.Primary Text="Generar Aleatorio" />
</div>
<div class="d-flex align-items-stretch">
    <AppInputText Placeholder="Texto generado acá" @bind-Value="textoGenerado" />
</div>
@if (mensajeError != "")
{
    <div class="alert alert-danger" role="alert">
        @mensajeError
    </div>
}
@code
{
    private string textoGenerado;
    private string mensajeError = "";
    private string pathArchivo;
    private int numeroCaracteres = 10;
    private bool chkTexto = false;
    private bool chkNumeros = false;
    private bool chkCaracteres = false;
    private bool chkGenerarArchivo = false;
    static Random rd = new Random();
    private string caracteresPermitidos;

    private void GenerarTexto()
    {
        caracteresPermitidos = "";
        mensajeError = "";
        if (chkTexto == true) caracteresPermitidos = caracteresPermitidos + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
        if (chkNumeros == true) caracteresPermitidos = caracteresPermitidos + "0123456789";
        if (chkCaracteres == true) caracteresPermitidos = caracteresPermitidos + "!@$?_-.";

        char[] chars = new char[numeroCaracteres];

        if (chkTexto == false && chkNumeros == false && chkCaracteres == false) { }
        else
        {
            for (int i = 0; i < numeroCaracteres; i++)
            {
                chars[i] = caracteresPermitidos[rd.Next(0, caracteresPermitidos.Length)];
            }
            textoGenerado = new string(chars);

            if (chkGenerarArchivo == true)
            {
                try
                {
                    var rutaCompleta = pathArchivo + "\\ArchivoGenerado.txt";
                    File.WriteAllText(rutaCompleta, textoGenerado);
                }
                catch (Exception)
                {
                    mensajeError = "Ruta Inválida. Indique una ruta correcta";
                }

            }
        }

    }
}